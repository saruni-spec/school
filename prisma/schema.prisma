generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum attendance_status {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

enum installment_types{
  SINGLE_PAYMENT
  WEEKLY
  MONTHLY
  SEMESTER
  ANNUAL
  EMERGENCY
}
enum employment_status {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERN
  TEMPORARY
  NONE
}


enum event_role {
  PARTICIPANT
  ORGANIZER
  JUDGE
  SUPERVISOR
}


enum event_scope {
  INTER_SCHOOL
  INTRA_SCHOOL
  class_progression
  GRADE
  DEPARTMENT
  STREAM_LEVEL
  INDIVIDUAL
}


enum exam_type {
  QUIZ
  MID_TERM
  FINAL
  ASSIGNMENT
}


enum facility_type {
  EDUCATIONAL
  RECREATIONAL
  DINING
  SPORTS
  TRANSPORTATION
  MEDICAL
}


enum fee_type_enum {
  TUITION
  LIBRARY
  SPORTS
  TRANSPORT
  FACILITY
  DEVELOPMENT
  COURSE_MATERIAL
  STATIONERY
  UNIFORM
  MEDICAL
  CULINARY
  LAB
  EVENT_PARTIPATION
  DAMAGE
  FINE
  MISCELLANEOUS
}


enum participant_type {
  STUDENT
  TEACHER
  STAFF
  GUEST
  GUARDIAN
}


enum participation_status {
  REGISTERED
  ATTENDED
  ABSENT
  WITHDRAWN
  DISQUALIFIED
}


enum payment_method {
  CASH
  BANK_TRANSFER
  CREDIT_CARD
  MOBILE_MONEY
  CHEQUE
}


enum payment_status {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  OVERPAID
}


enum relationship_type {
  FATHER
  MOTHER
  GUARDIAN
  OTHER
}


enum reviewable_entity {
  SCHOOL
  SCHOOL_FACILITY
  EVENT
  TEACHER
}

enum grade_level_type {
  PRE_PRIMARY_1
  PRE_PRIMARY_2
  GRADE_1
  GRADE_2
  GRADE_3
  GRADE_4
  GRADE_5
  GRADE_6
  GRADE_7
  GRADE_8
  GRADE_9
  GRADE_10
  GRADE_11
  GRADE_12
}

enum school_type {
  PRE_PRIMARY
  LOWER_PRIMARY
  UPPER_PRIMARY
  LOWER_SECONDARY
  UPPER_SECONDARY
}



enum severity {
  EMERGENCY
  URGENT
  PRIOTITY
  INQUIRY
  LOW
}

// Enum for defining broad privilege categories
enum privilege_category {
  SYSTEM_ADMIN     // Absolute system control
  EXECUTIVE        // High-level management
  ADMINISTRATIVE   // Operational management
  OPERATIONAL      // Day-to-day operations
  SUPERVISORY      // Oversight and review
  PERSONAL         // Self-related access
}
// Enum for privilege scopes
enum privilege_scope {
  GLOBAL           // Entire system
  INSTITUTIONAL    // Entire institution
  DEPARTMENTAL     // Department level
  PERSONAL         // Individual level
}

enum system_resource {
 SYSTEM
  INSTITUTION
  USERS
  STUDENTS
  STAFF
  DEPARTMENTS
  EVENTS
  EXAMINATIONS
  FACILITIES
  FINANCES
  MEDICAL
  LIBRARY
  ACADEMIC_CLASSES
  ACADEMIC_STREAMS
  ADMISSIONS
  CURRICULUM
  COMMUNICATION
}

// Comprehensive Role Types Enum
enum role_type {
  // System-Level Roles
  SYSTEM_ADMINISTRATOR  // Absolute system control, highest level of access

  // Executive Leadership Roles
  PRINCIPAL             // Top institutional leadership
  VICE_PRINCIPAL        // Deputy institutional leadership
  SCHOOL_ADMINISTRATOR  // Comprehensive school-level administrative role

  // Academic Leadership Roles
  HEAD_OF_DEPARTMENT    // Department-level academic leadership
  ACADEMIC_REGISTRAR    // Academic records and registration management
  EXAM_CONTROLLER       // Examinations management
  CURRICULUM_COORDINATOR // Curriculum development and oversight

  // Teaching Roles
  TEACHER               // Standard teaching position
  CLASS_TEACHER         // Additional responsibilities for a specific class
  FACULTY_MEMBER        // Broader academic staff role

  // Administrative Roles
  ADMINISTRATIVE_STAFF  // General administrative support
  SECRETARY             // Administrative coordination
  FACILITY_MANAGER      // Facilities management
  FINANCIAL_OFFICER     // Financial management
  HUMAN_RESOURCES_MANAGER  // Personnel and HR management
  EVENT_COORDINATOR     // Event planning and management

  // Support and Specialized Roles
  LIBRARIAN             // Library management
  ASSISTANT_LIBRARIAN   // Support for library operations
  TECHNOLOGY_SUPPORT    // IT and technical support
  SECURITY_PERSONNEL    // Campus security
  
  // Student and Admission Related Roles
  ADMISSIONS_OFFICER    // Student admissions management
  COUNSELOR             // Student guidance and support
  
  // Medical and Health Roles
  MEDICAL_STAFF         // Healthcare professionals
  
  // Non-Academic Roles
  CHEF                  // Food services management

  // Student and Parent Roles
  STUDENT               // Current students
  PARENT                // Student guardians

  //
  // Specific roles in domains
  REPRESENTATIVE
  ASSISTANT_REPRESENTATIVE
  MEMBER
  

  // Audit and Compliance
  AUDIT_OFFICER         // Compliance and internal audit
}

enum picture_category {
  EVENT
  DOCUMENT
  CLASSROOM
  FINANCIAL
  STUDENT_WORK
  FACILITY
  EXTRACURRICULAR
  ADMINISTRATIVE
  ACHIEVEMENT
  MISCELLANEOUS
  EDUCATIONAL
  LOST_AND_FOUND
}

enum gallery_type {
  EVENT
  SCHOOL
  DEPARTMENT
  CLASS
  STUDENT
  STAFF
  ADMINISTRATIVE
  FACILITY
  FINANCE
  ACHIEVEMENTS
  MISCELLANEOUS
}

enum gallery_visibility {
  PRIVATE
  INTERNAL
  PUBLIC
}


//represents a school and details required for a school

model school {
  id                          Int                        @id @default(autoincrement())
  name                        String                     @db.VarChar(100)  @unique
  address                     String?
  contact_info                Json?
  license_info                Json?
  created_at                  DateTime?                  @default(now()) @db.Timestamptz(6)
  updated_at                  DateTime?                  @default(now()) @db.Timestamptz(6)
  deleted_at                  DateTime?                  @db.Timestamptz(6)

  academic_year               academic_year[]
  award                       award[]
  department                  department[]
  event_school_participant    event_school_participant[]
  fee                         fee[]
  review                      review[]
  school_facility             school_facility[]         
  permission                  permission[]
  users                       users[]
  course_material             course_material[]
  levels_offered              levels_offered[]
  stream                      stream[]
  school_leader               school_leader[]
  event                       event[]
  announcement                announcement[]
}

// These are the different school levels,ie. LOWER_PRIMARY,UPPER_PRIMARY....that a spefic school has

model levels_offered{
  school_id                  Int
  school_level_id            Int
 
  school                     school?            @relation(fields: [school_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  school_level               school_level?      @relation(fields: [school_level_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([school_id,school_level_id])
}

// These are the different school types,ie. PRE_PRIMARY,LOWER_PRIMARY,UPPER_PRIMARY,LOWER_SECONDARY,UPPER_SECONDARY
// that can be offered by a school

model school_level {
  id                        Int                     @id   @default(autoincrement())
  type                      school_type             @unique

  levels_offered            levels_offered[]    
  grade_level               grade_level[]        
}

// Represents any facility that a school may have

model facility {
  id                      Int                     @id   @default(autoincrement())
  name                    String                  @db.VarChar(20)
  type                    facility_type         
  description             String?                 @db.VarChar(100)
  created_at              DateTime?               @default(now()) @db.Timestamptz(6)
  updated_at              DateTime?               @default(now()) @db.Timestamptz(6)
  deleted_at              DateTime?               @db.Timestamptz(6)

  school_facility         school_facility[]       

  @@unique([name,type])

}

// Represents a school facility and the details of the facility

model school_facility {
  id                      Int                     @id @default(autoincrement())
  current_school          Int?
  is_facility             Int?
  description             String?                 @db.VarChar(100)
  justification           String?                 @db.VarChar(100)

  created_at              DateTime?               @default(now()) @db.Timestamptz(6)
  updated_at              DateTime?               @default(now()) @db.Timestamptz(6)
  deleted_at              DateTime?               @db.Timestamptz(6)

  capacity                Int?
  opening_hours           DateTime?
  closing_hours           DateTime?

  facility                facility?               @relation(fields: [is_facility], references: [id], onDelete: NoAction, onUpdate: NoAction)
  school                  school?                 @relation(fields: [current_school], references: [id], onDelete: NoAction, onUpdate: NoAction)
  

  lib_books               lib_book[]
  permission              permission[]
  facility_staff          facility_staff[]

  @@unique([current_school,is_facility])
}

model facility_staff {
  staff_id                  Int
  school_facility_id        Int

  role                      role_type?

  created_at                DateTime?               @default(now()) @db.Timestamptz(6)
  updated_at                DateTime?               @default(now()) @db.Timestamptz(6)
  deleted_at                DateTime?               @db.Timestamptz(6)

  department_staff          department_staff?       @relation(fields: [staff_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  school_facility           school_facility?        @relation(fields: [school_facility_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([staff_id,school_facility_id])
}


// Represents the start and end date of an academic year of a specific school

model academic_year {
  id                        Int               @id @default(autoincrement())
  school_id                 Int?
  year                      String            @db.VarChar(50)
  start_date                DateTime          @db.Date
  end_date                  DateTime          @db.Date
  is_current                Boolean?          @default(false)
  created_at                DateTime?         @default(now()) @db.Timestamptz(6)
  updated_at                DateTime?         @default(now()) @db.Timestamptz(6)
  deleted_at                DateTime?         @db.Timestamptz(6)
  school                    school?           @relation(fields: [school_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  
  semester                  semester[]
  class_progression         class_progression[]
  school_leader             school_leader[]
  
  @@unique([school_id, year])  
}

// Represents a semester and the details of the semester of a specific academic year

model semester {
  id                     Int                    @id @default(autoincrement())
  academic_year_id       Int? 
  name                   String                 @db.VarChar(50)  @unique
  start_date             DateTime               @db.Date
  end_date               DateTime               @db.Date
  is_current             Boolean?               @default(false)
  created_at             DateTime?              @default(now()) @db.Timestamptz(6)
  updated_at             DateTime?              @default(now()) @db.Timestamptz(6)
  deleted_at             DateTime?              @db.Timestamptz(6)

  academic_year          academic_year?         @relation(fields: [academic_year_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  student_ellectives     student_ellectives[]
  
  award                  award[]
  exam                   exam[]
  subject_allocation     subject_allocation[]

}


model department {
  id                                         Int       @id @default(autoincrement())
  school_id                                  Int?
  name                                       String    @db.VarChar(100)
  description                                String?

  created_at                                 DateTime? @default(now()) @db.Timestamptz(6)
  updated_at                                 DateTime? @default(now()) @db.Timestamptz(6)
  deleted_at                                 DateTime? @db.Timestamptz(6)

  school                                     school?   @relation(fields: [school_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  
  department_staff                           department_staff[]  
  subject_allocation                         subject_allocation[]
  permission                                 permission[]
  fee_payee                                  fee_payee[]
  award                                      award[]
  event_department_participant               event_department_participant[]

  @@unique([school_id,name])
  @@index([school_id])
}


model department_staff {
  id                                   Int                     @id @default(autoincrement()) 
  staff_id                             Int?                    
  staff_code                           String?
  department_id                        Int?
  employment_status                    employment_status?      @default(FULL_TIME)
  qualifications                       Json?
  join_date                            DateTime?               @default(now())  @db.Date

  current_role                         role_type?              @default(MEMBER)

  created_at                           DateTime?               @default(now()) @db.Timestamptz(6)
  updated_at                           DateTime?               @default(now()) @db.Timestamptz(6)
  deleted_at                           DateTime?               @db.Timestamptz(6)

  department                           department?             @relation(fields: [department_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  staff                                staff?                  @relation(fields: [staff_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  facility_staff                       facility_staff[]                                   
  teacher                              teacher[]
  

  @@unique([department_id,staff_id])

}

// Represents the diffrent grades that are currently being offered in a school

model grade_level{
  id                         Int                        @id @default(autoincrement())
  level                      grade_level_type           @unique
  school_level_id            Int?

  created_at                 DateTime?                  @default(now()) @db.Timestamptz(6)
  updated_at                 DateTime?                  @default(now()) @db.Timestamptz(6)
  deleted_at                 DateTime?                  @db.Timestamptz(6)

  school_level               school_level?              @relation(fields: [school_level_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  
  stream                     stream[]
  subject_grade              subject_grade[]


}

// Represents a stream
// A stream is a division/part of a grade level

model stream {
  id                           Int                          @id @default(autoincrement())
  grade_level_id               Int?
  school_id                    Int?
  name                         String                       @db.VarChar(50)
  capacity                     Int?

  created_at                   DateTime?                    @default(now()) @db.Timestamptz(6)
  updated_at                   DateTime?                    @default(now()) @db.Timestamptz(6)
  deleted_at                   DateTime?                    @db.Timestamptz(6)

  grade_level                  grade_level?                 @relation(fields: [grade_level_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  school                       school?                      @relation(fields: [school_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  exam_sitting                 exam_sitting[]
  
  subject_allocation           subject_allocation[]
  
  slot_assignment              slot_assignment[]
  permission                   permission[]
  fee_payee                    fee_payee[]
  class_progression            class_progression[]

  @@unique([grade_level_id,name])
}

// Represents a colletion of students in the same class
// eg,class of 2024
// and their progression of a class through different grades
// eg.class of 2024 would be in a different grade each year


model class_progression {
  id                          Int                       @id @default(autoincrement())
  name                        String                    @db.VarChar(50)              
  is_current                  Boolean?  

  academic_year_id            Int?
  stream_id                   Int
  class_teacher               Int?

  created_at                  DateTime?                  @default(now()) @db.Timestamptz(6)
  updated_at                  DateTime?                  @default(now()) @db.Timestamptz(6)
  deleted_at                  DateTime?                  @db.Timestamptz(6)


  academic_year               academic_year?             @relation(fields: [academic_year_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  stream                      stream?                    @relation(fields: [stream_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  teacher                     teacher?                   @relation(fields: [class_teacher], references: [id], onDelete: NoAction, onUpdate: NoAction)
  
  event_class_participant     event_class_participant[]
  permission                  permission[]
  student_class               student_class[]
  assignment                  assignment[]
  award                       award[]

  @@unique([stream_id,academic_year_id])
  @@map("class")
}


//
//assining a student to a class group
//Will be used when a student changes schools,then they can be placed in a different class group

model student_class {
  student_id                 Int
  class_progress             Int
  admission_number           String?            @db.VarChar(20)

  student_role               role_type?         @default(MEMBER)

  admission_date             DateTime?          @db.Date
  start_date                 DateTime?          @db.Date
  end_date                   DateTime?          @db.Date

  created_at                 DateTime?          @default(now()) @db.Timestamptz(6)
  updated_at                 DateTime?          @default(now()) @db.Timestamptz(6)
  deleted_at                 DateTime?          @db.Timestamptz(6)


  class_progression          class_progression?  @relation(fields: [class_progress], references: [id], onDelete: NoAction, onUpdate: NoAction)
  student                    student?            @relation(fields: [student_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([student_id, class_progress])
  @@index([student_id,class_progress])
}


model permission {
  id                   Int                 @id @default(autoincrement())

  role_id              Int
  role                 role                @relation(fields: [role_id], references: [id], onDelete: Cascade)

  resource             system_resource
  scope                privilege_scope     @default(DEPARTMENTAL)
 
  can_admin            Boolean             @default(false)
  can_create           Boolean             @default(false)
  can_read             Boolean             @default(false)
  can_update           Boolean             @default(false)
  can_delete           Boolean             @default(false)

  department_id        Int?
  school_id            Int?
  class_progression_id             Int?
  school_facility_id   Int?
  stream_id            Int?

  department           department?         @relation(fields: [department_id], references: [id], onDelete: SetNull)
  school               school?             @relation(fields: [school_id], references: [id], onDelete: SetNull)
  class_progression    class_progression?  @relation(fields: [class_progression_id], references: [id], onDelete: SetNull)          
  school_facility      school_facility?    @relation(fields: [school_facility_id], references: [id], onDelete: SetNull)
  stream               stream?             @relation(fields: [stream_id], references: [id], onDelete: SetNull)

  created_at           DateTime            @default(now())
  updated_at           DateTime            @default(now())
  deleted_at           DateTime?
  
  @@unique([role_id, resource,scope,can_admin,can_create,can_delete,can_read,can_update])
  @@index([resource, department_id, school_id, class_progression_id,role_id])
}

model users {
  id                                 Int                      @id @default(autoincrement())
  name                               String?                  @db.VarChar(50)
  first_name                         String                   @db.VarChar(50)
  last_name                          String                   @db.VarChar(50)
  email                              String                   @unique @db.VarChar(100)
  phone                              String?                  @db.VarChar(20)
  date_of_birth                      DateTime?                @db.Date
  address                            String?
  password                           String
  emergency_contacts                 Json?
  role_id                            Int?
  
  created_at                         DateTime?                @default(now()) @db.Timestamptz(6)
  updated_at                         DateTime?                @default(now()) @db.Timestamptz(6)
  deleted_at                         DateTime?                @db.Timestamptz(6)


  current_school                     Int? 

  role                               role?                    @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  school                             school?                  @relation(fields: [current_school], references: [id], onDelete: NoAction, onUpdate: NoAction)

  announcement                       announcement[]
  event                              event[]
  event_user_participant             event_user_participant[]
  messages_messages_recepientTousers messages[]               @relation("messages_recepientTousers")
  messages_messages_senderTousers    messages[]               @relation("messages_senderTousers")
  parent                             parent[]
  review                             review[]
  staff                              staff[]
  student                            student[]
  admin                              admin[]
  picture                            picture[]
  medical                            medical[]
  course_material                    course_material[]
  fee_payee                          fee_payee[]
  award                              award[]
  payment                            payment[]

  @@index([current_school,role_id])
}


model role {
  id                        Int                  @id @default(autoincrement())
  type                      role_type            @unique
  name                      String
  description               String?
  category                  privilege_category?
  
  created_at                DateTime             @default(now())
  updated_at                DateTime             @default(now())
  deleted_at                DateTime?
  

  permissions               permission[]
  users                     users[]
 
  @@unique([type, category])
}

model school_leader {
  id                                 Int                @id @default(autoincrement())
  school_id                          Int?
  staff_id                           Int?
  leader_code                        String?            @db.VarChar(30)
  current_role                       role_type?

  academic_year_id                   Int?
  date_removed                       DateTime?          @db.Date
  reason_removed                     String?            @db.VarChar(50)

  created_at                         DateTime?          @default(now()) @db.Timestamptz(6)
  updated_at                         DateTime?          @default(now()) @db.Timestamptz(6)
  deleted_at                         DateTime?          @db.Timestamptz(6)

  school                             school?            @relation(fields: [school_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  staff                              staff?             @relation(fields: [staff_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  academic_year                      academic_year?     @relation(fields: [academic_year_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  
  fee                                fee[]
  @@unique([staff_id,academic_year_id,school_id])
  @@index([staff_id,academic_year_id])
}


model admin{
  id                                 Int                @id @default(autoincrement())
  user_id                            Int                @unique
  
  created_at                         DateTime?          @default(now()) @db.Timestamptz(6)
  updated_at                         DateTime?          @default(now()) @db.Timestamptz(6)
  deleted_at                         DateTime?          @db.Timestamptz(6)
 
  users                              users?             @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
 

}


model staff {
  id                                              Int                 @id @default(autoincrement())
  user_id                                         Int                 @unique
  
  created_at                                      DateTime?           @default(now()) @db.Timestamptz(6)
  updated_at                                      DateTime?           @default(now()) @db.Timestamptz(6)
  deleted_at                                      DateTime?           @db.Timestamptz(6)
  
  users                                           users?              @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  
  department_staff                                department_staff[]
  school_leader                                   school_leader[]
  @@index([user_id])
}


model teacher {
  id                    Int               @id @default(autoincrement())
  staff_id              Int?              @unique
  is_active             Boolean?          @default(true)

  created_at            DateTime?         @default(now()) @db.Timestamptz(6)
  updated_at            DateTime?         @default(now()) @db.Timestamptz(6)
  deleted_at            DateTime?         @db.Timestamptz(6)


  department_staff      department_staff? @relation(fields: [staff_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  exam_sitting          exam_sitting[]
  result                result[]
  review                review[]
  subject_allocation    subject_allocation[]
  slot_assignment       slot_assignment[]
  assignment            assignment[]
  class_progression     class_progression[]

  @@index([staff_id])
}


model student {
  id                    Int               @id @default(autoincrement())
  user_id               Int               @unique

  created_at            DateTime?         @default(now()) @db.Timestamptz(6)
  updated_at            DateTime?         @default(now()) @db.Timestamptz(6)
  deleted_at            DateTime?         @db.Timestamptz(6)
          
  users                 users?            @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  parent_student        parent_student[]
  result                result[]
  student_class         student_class[]
  student_ellectives    student_ellectives[]
  

}


model subject {
  id                    Int               @id @default(autoincrement())
  name                  String            @db.VarChar(100) @unique
  description           String?

  created_at            DateTime?         @default(now()) @db.Timestamptz(6)
  updated_at            DateTime?         @default(now()) @db.Timestamptz(6)
  deleted_at            DateTime?         @db.Timestamptz(6)


  
  subject_grade         subject_grade[]
  course_material       course_material[]
  lib_book              lib_book[]

}

model subject_grade { 
  id                    Int                     @id @default(autoincrement())
  subject_id            Int?
  grade_level_id        Int?
  name                  String?           
  description           String?
  created_at            DateTime?               @default(now())
  updated_at            DateTime?               @default(now())
  
  subject               subject?                @relation(fields: [subject_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  grade_level           grade_level?            @relation(fields: [grade_level_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subject_allocation    subject_allocation[]

  @@unique([grade_level_id,subject_id])
}

model subject_allocation {
  id                        Int                       @id @default(autoincrement())
  department_id             Int?
  teacher_id                Int?
  subject_grade_id          Int?
  stream_id                 Int
  semester_id               Int
  assigned_date             DateTime?                 @default(dbgenerated("CURRENT_DATE")) @db.Date

  created_at                DateTime?                 @default(now()) @db.Timestamptz(6)
  updated_at                DateTime?                 @default(now()) @db.Timestamptz(6)
  deleted_at                DateTime?                 @db.Timestamptz(6)


  stream                    stream                    @relation(fields: [stream_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  semester                  semester                  @relation(fields: [semester_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subject_grade             subject_grade?            @relation(fields: [subject_grade_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  teacher                   teacher?                  @relation(fields: [teacher_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  department                department?               @relation(fields: [department_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  
  
  student_ellectives    student_ellectives[]
  exam_sitting          exam_sitting[]
  slot_assignment       slot_assignment[]
  assignment            assignment[]
  
  @@unique([teacher_id, subject_grade_id])
}

model medical {
  id                                Int                      @id @default(autoincrement())
  user_id                           Int
  description                       String                   @unique @db.VarChar(100)                              
  notes                             String                   @unique @db.VarChar(100)
  medic_id                          Int?

  created_at                        DateTime?                @default(now()) @db.Timestamptz(6)
  updated_at                        DateTime?                @default(now()) @db.Timestamptz(6)
  deleted_at                        DateTime?                @db.Timestamptz(6)

  users                             users?                   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([user_id])
}


model assignment {
  id                      Int                    @id @default(autoincrement())
  description             String                 @db.VarChar(100)
  teacher_id              Int
  subject_allocation_id   Int?
  class_progression_id    Int?
  due_date                DateTime?              @db.Date

  created_at              DateTime?              @default(now()) @db.Timestamptz(6)
  updated_at              DateTime?              @default(now()) @db.Timestamptz(6)
  deleted_at              DateTime?              @db.Timestamptz(6)


  teacher                 teacher?               @relation(fields: [teacher_id], references: [id])
  subject_allocation      subject_allocation?    @relation(fields: [subject_allocation_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  class_progression       class_progression?     @relation(fields: [class_progression_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}


model student_ellectives {
  student_id                  Int
  subject_allocation_id       Int
  semester_id                 Int
  enrollment_date             DateTime?                 @default(dbgenerated("CURRENT_DATE")) @db.Date

  created_at                  DateTime?                 @default(now()) @db.Timestamptz(6)
  updated_at                  DateTime?                 @default(now()) @db.Timestamptz(6)
  deleted_at                  DateTime?                 @db.Timestamptz(6)


  semester                    semester                  @relation(fields: [semester_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subject_allocation          subject_allocation        @relation(fields: [subject_allocation_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  student                     student                   @relation(fields: [student_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  
  @@id([student_id, subject_allocation_id])
}


model parent {
  id                Int               @id @default(autoincrement())
  user_id           Int?              @unique
  relationship_type relationship_type

  created_at        DateTime?         @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?         @default(now()) @db.Timestamptz(6)
  deleted_at        DateTime?         @db.Timestamptz(6)

  users             users?            @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parent_student    parent_student[]

}


model parent_student {
  parent_id         Int
  student_id        Int

  created_at        DateTime? @default(now()) @db.Timestamptz(6)
  updated_at        DateTime? @default(now()) @db.Timestamptz(6)
  deleted_at        DateTime? @db.Timestamptz(6)

  parent            parent    @relation(fields: [parent_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  student           student   @relation(fields: [student_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([parent_id, student_id])
}


model slot {
  id                Int           @id @default(autoincrement())
  name              String?           @db.VarChar(50)
  day_of_week       Int
  start_time        DateTime      @db.Time(6)
  end_time          DateTime      @db.Time(6)
  room_number       String?       @db.VarChar(20)

  created_at        DateTime?     @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?     @default(now()) @db.Timestamptz(6)
  deleted_at        DateTime?     @db.Timestamptz(6)

  slot_assignments  slot_assignment[]

  @@unique([day_of_week,start_time,end_time,room_number])
}


model slot_assignment {
  id                             Int                          @id @default(autoincrement())
  slot_id                        Int
  stream_id                      Int
  teacher_id                     Int
  subject_allocation_id          Int
  created_at                     DateTime?                    @default(now()) @db.Timestamptz(6)
  updated_at                     DateTime?                    @default(now()) @db.Timestamptz(6)
  deleted_at                     DateTime?                    @db.Timestamptz(6)

  slot                           slot                         @relation(fields: [slot_id], references: [id])
  teacher                        teacher                      @relation(fields: [teacher_id], references: [id])
  subject_allocation             subject_allocation           @relation(fields: [subject_allocation_id], references: [id])
  stream                         stream?                      @relation(fields: [stream_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  
  @@unique([slot_id, teacher_id,stream_id])
}


model exam {
  id                  Int            @id @default(autoincrement())
  semester_id         Int?
  name                String         @db.VarChar(30)
  exam_providers      String?        @db.VarChar(30)
  start_date          DateTime?      @db.Date
  end_date            DateTime?      @db.Date
  type                exam_type

  created_at          DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at          DateTime?      @default(now()) @db.Timestamptz(6)
  deleted_at          DateTime?      @db.Timestamptz(6)

  semester            semester?      @relation(fields: [semester_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  exam_sitting        exam_sitting[]

  @@unique([semester_id, name, type, start_date])
}


model exam_sitting {
  id                    Int                        @id @default(autoincrement())
  exam_id               Int?
  supervisor            Int?
  subject_allocation_id Int?
  stream_id             Int?
  out_of                Decimal?                   @db.Decimal(5, 2)
  remarks               String?
  sitting_date          DateTime                   @db.Date

  created_at            DateTime?                  @default(now()) @db.Timestamptz(6)
  updated_at            DateTime?                  @default(now()) @db.Timestamptz(6)
  deleted_at            DateTime?                  @db.Timestamptz(6)

  total_marks           Int
  exam                  exam?                      @relation(fields: [exam_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  stream                stream?                    @relation(fields: [stream_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subject_allocation    subject_allocation?        @relation(fields: [subject_allocation_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  teacher               teacher?                   @relation(fields: [supervisor], references: [id], onDelete: NoAction, onUpdate: NoAction)
  result                result[]

  @@unique([stream_id, subject_allocation_id, exam_id, sitting_date])
}

model fee_payee {
  id                        Int               @id @default(autoincrement())
  fee_id                    Int?
  for_individual            Int?

  //when a fee is supposed to be payed by a class or grade,all streams in that grade will have a record
  //when fee is recurring address it to a stream
  for_stream                Int?
  //when the fee is a single payment or emergency payment

  for_department            Int?
  whole_school              Boolean           @default(false)   

  created_at                DateTime?         @default(now()) @db.Timestamptz(6)
  updated_at                DateTime?         @default(now()) @db.Timestamptz(6)
  deleted_at                DateTime?         @db.Timestamptz(6)


  users                     users?            @relation(fields: [for_individual], references: [id], onDelete: NoAction, onUpdate: NoAction)
  stream                    stream?           @relation(fields: [for_stream], references: [id], onDelete: NoAction, onUpdate: NoAction)
  department                department?       @relation(fields: [for_department], references: [id], onDelete: NoAction, onUpdate: NoAction)
  fee                       fee?              @relation(fields: [fee_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  

  payment                   payment[]

  @@index([fee_id])
}


model fee {
  id                        Int               @id @default(autoincrement())
  code                      String            @db.VarChar(50)
  fee_for                   fee_type_enum
  description               String?           @db.VarChar(100)
  approved_by               Int?
  amount                    Decimal           @db.Decimal(10, 2)
  installments              installment_types
  due_date                  DateTime?         @db.Date
  school_id                 Int?  

  school_leader             school_leader?    @relation(fields: [approved_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  school                    school?           @relation(fields: [school_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  created_at                DateTime?         @default(now()) @db.Timestamptz(6)
  updated_at                DateTime?         @default(now()) @db.Timestamptz(6)
  deleted_at                DateTime?         @db.Timestamptz(6)

  fee_payee                  fee_payee[]

  @@unique([fee_for,amount,due_date])
  @@index([due_date])
}


model payment {
  id               Int             @id @default(autoincrement())
  paid_by          Int?         
  fee_payee_id     Int?
  amount           Decimal         @db.Decimal(10, 2)
  over_payment     Decimal?        @db.Decimal(10, 2)
  payment_date     DateTime?       @default(now()) @db.Timestamptz(6)
  payment_method   payment_method
  status           payment_status? @default(PENDING)
  reference_number String          @unique @db.VarChar(100)

  created_at       DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at       DateTime?       @default(now()) @db.Timestamptz(6)
  deleted_at       DateTime?       @db.Timestamptz(6)

  fee_payee        fee_payee?      @relation(fields: [fee_payee_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users            users?          @relation(fields: [paid_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([paid_by])
}


model announcement {
  id              Int         @id @default(autoincrement())
  announcement    String?     @db.VarChar(500)

  date_for        DateTime    @db.Date
  valid_upto      DateTime    @db.Date
  scope           event_scope
  made_by         Int?
  school_id       Int?

  created_at      DateTime?   @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?   @default(now()) @db.Timestamptz(6)
  deleted_at      DateTime?   @db.Timestamptz(6)

  users           users?      @relation(fields: [made_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  school          school?     @relation(fields: [school_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
 
 @@unique([school_id, date_for, made_by, scope,valid_upto])
}


model award {
  id                        Int               @id @default(autoincrement())
  name                      String?           @db.VarChar(20)
  description               String?         
  semester_id               Int?
  awarded_by                String?           @db.VarChar(20)
  awared_for                String?           @db.VarChar(100)
  for_individual            Int?
  for_class                 Int?
  for_department            Int?
  for_school                Int?

  created_at                DateTime?         @default(now()) @db.Timestamptz(6)
  updated_at                DateTime?         @default(now()) @db.Timestamptz(6)
  deleted_at                DateTime?         @db.Timestamptz(6)

  users                     users?            @relation(fields: [for_individual], references: [id], onDelete: NoAction, onUpdate: NoAction)
  class_progression         class_progression? @relation(fields: [for_class], references: [id], onDelete: NoAction, onUpdate: NoAction)
  department                department?       @relation(fields: [for_department], references: [id], onDelete: NoAction, onUpdate: NoAction)
  school                    school?           @relation(fields: [for_school], references: [id], onDelete: NoAction, onUpdate: NoAction)
  semester                  semester?         @relation(fields: [semester_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

@@unique([semester_id,name])
}


model event {
  id                       Int                        @id @default(autoincrement())
  name                     String                     @db.VarChar(100)
  description              String?
  location                 String?                    @db.VarChar(200)
  start_date               DateTime                   @db.Timestamptz(6)
  end_date                 DateTime                   @db.Timestamptz(6)
  scope                    event_scope
  created_by               Int?
  school_id                Int?

  created_at               DateTime?                  @default(now()) @db.Timestamptz(6)
  updated_at               DateTime?                  @default(now()) @db.Timestamptz(6)
  deleted_at               DateTime?                  @db.Timestamptz(6)

  users                    users?                     @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  school                   school?                    @relation(fields: [school_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  event_class_participant  event_class_participant[]
  event_school_participant event_school_participant[]
  event_department_participant event_department_participant[]
  event_user_participant   event_user_participant[]
  review                   review[]

  @@index([start_date, end_date], map: "idx_event_date")
  @@index([scope], map: "idx_event_scope")
  @@unique([name,start_date,school_id])
}


model event_class_participant {
  event_id          Int
  class_progression_id          Int
  registration_date DateTime?             @default(now()) @db.Timestamptz(6)
  status            participation_status? @default(REGISTERED)
  deleted_at        DateTime?             @db.Timestamptz(6)
  class_progression class_progression     @relation(fields: [class_progression_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  event             event                 @relation(fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([event_id, class_progression_id])
}


model event_school_participant {
  event_id          Int
  school_id         Int
  registration_date DateTime?             @default(now()) @db.Timestamptz(6)
  status            participation_status? @default(REGISTERED)
  deleted_at        DateTime?             @db.Timestamptz(6)
  event             event                 @relation(fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  school            school                @relation(fields: [school_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([event_id, school_id])
  @@index([event_id, school_id], map: "idx_event_school_participant")
}


model event_department_participant {
  event_id          Int
  department_id     Int
  registration_date DateTime?             @default(now()) @db.Timestamptz(6)
  status            participation_status? @default(REGISTERED)
  deleted_at        DateTime?             @db.Timestamptz(6)
  event             event                 @relation(fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  department        department            @relation(fields: [department_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([event_id, department_id])
}


model event_user_participant {
  event_id          Int
  user_id           Int
  participant_type  participant_type
  registration_date DateTime?             @default(now()) @db.Timestamptz(6)
  attendance_status participation_status? @default(REGISTERED)
  role              event_role?
  deleted_at        DateTime?             @db.Timestamptz(6)
  event             event                 @relation(fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users             users                 @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([event_id, user_id])
  @@index([event_id, user_id], map: "idx_event_user_participant")
}


model messages {
  id                              Int       @id @default(autoincrement())
  message_details                 String?   @db.VarChar(200)
  topic                           String?   @db.VarChar(30)
  severity                        severity?
  sender                          Int?
  recepient                       Int?
  deleted_at                      DateTime? @db.Timestamptz(6)
  users_messages_recepientTousers users?    @relation("messages_recepientTousers", fields: [recepient], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_messages_senderTousers    users?    @relation("messages_senderTousers", fields: [sender], references: [id], onDelete: NoAction, onUpdate: NoAction)


}



model result {
  student_id      Int
  marked_by       Int?
  marks_obtained  Decimal?     @db.Decimal(5, 2)
  exam_sitting_id Int

  created_at      DateTime?    @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?    @default(now()) @db.Timestamptz(6)
  deleted_at      DateTime?    @db.Timestamptz(6)

  exam_sitting    exam_sitting @relation(fields: [exam_sitting_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  teacher         teacher?     @relation(fields: [marked_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  student         student      @relation(fields: [student_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([student_id, exam_sitting_id])
}


model review {
  id                 Int               @id @default(autoincrement())
  reviewer_id        Int
  entity_type        reviewable_entity
  school_id          Int?
  school_facility_id Int?
  event_id           Int?
  teacher_id         Int?
  rating             Int
  title              String?           @db.VarChar(100)
  content            String

  created_at         DateTime?         @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?         @default(now()) @db.Timestamptz(6)
  deleted_at         DateTime?         @db.Timestamptz(6)

  event              event?            @relation(fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users              users             @relation(fields: [reviewer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  school             school?           @relation(fields: [school_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  teacher            teacher?          @relation(fields: [teacher_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([entity_type], map: "idx_review_entity_type")
  @@unique([reviewer_id,entity_type,title])
}



// Represents course material and the details of the course material
// Course material can be published by a user
// Course material can be assigned to a school
// Course material can be assigned to a subject

model course_material {
  id                      Int                        @id @default(autoincrement())
  name                    String                     @db.VarChar(50)
  published_by            Int?
  school_id               Int?
  subject_id              Int?
  grade_level             grade_level_type               
  description             String                     @db.VarChar(100)

  subject                 subject?                   @relation(fields: [subject_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  school                  school?                    @relation(fields: [school_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users                   users?                     @relation(fields: [published_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
}


model Gallery {
  id             Int             @id @default(autoincrement())
  name           String          @db.VarChar(255)
  description    String?         @db.Text
  type           gallery_type
  visibility     gallery_visibility @default(INTERNAL)
  category       picture_category
  
  location       String?         @db.VarChar(255)
  
  created_by     String?         @db.VarChar(100)
  tags           String[]        @db.VarChar(50)
  
  created_at     DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at     DateTime?       @default(now()) @db.Timestamptz(6)
  deleted_at     DateTime?       @db.Timestamptz(6)
  
  picture        picture[]

  @@index([type])
  @@index([visibility])
  
}


model picture {
  id             Int       @id @default(autoincrement())
  gallery_id     Int?
  title          String?         @db.VarChar(255)
  
  file_path      String          @db.VarChar(500)
  file_name      String          @db.VarChar(255)
  file_size      Int             @db.Integer
  mime_type      String          @db.VarChar(100)
  
  taken_at       DateTime?       @db.Timestamptz(6)
  uploaded_at    DateTime        @default(now()) @db.Timestamptz(6)
  tags           String[]        @db.VarChar(50)
  
  uploaded_by    Int?        
  
  created_at     DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at     DateTime?       @default(now()) @db.Timestamptz(6)
  deleted_at     DateTime?       @db.Timestamptz(6)

  gallery        Gallery?        @relation(fields: [gallery_id], references: [id])
  users          users?          @relation(fields:[uploaded_by],references :[id], onDelete: NoAction, onUpdate: NoAction)

  @@index([gallery_id])
  @@index([taken_at])
  @@index([uploaded_at])
  
}
// Represents a library book and the details of the book

model lib_book {
  id                    Int              @id @default(autoincrement())
  school_facility_id    Int
  book_name             String
  reference_number      String
  parental_advisory     Boolean?
  subject_id            Int?
  borrowed_by           Int?
  borrowed_on           DateTime?
  due_by                DateTime?
  returned_on           DateTime?
  damaged_by            Int?
  created_at            DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at            DateTime?       @default(now()) @db.Timestamptz(6)
  deleted_at            DateTime?       @db.Timestamptz(6)

  school_facility       school_facility @relation(fields: [school_facility_id], references: [id])
  

  subject               subject?        @relation(fields: [subject_id], references: [id])
}
